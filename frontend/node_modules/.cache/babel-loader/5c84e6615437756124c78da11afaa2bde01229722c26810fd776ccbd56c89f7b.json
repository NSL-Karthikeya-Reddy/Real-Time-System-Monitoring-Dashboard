{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KARTHIKEYA REDDY\\\\Desktop\\\\real\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport styles from \"../styles/Dashboard.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\");\nconst MetricsCard = ({\n  title,\n  value,\n  subtext,\n  color = \"white\"\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: styles.card,\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      color: color,\n      fontSize: '1.5rem',\n      fontWeight: 'bold'\n    },\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this), subtext && /*#__PURE__*/_jsxDEV(\"p\", {\n    className: styles.subtext,\n    children: subtext\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 17\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this);\n_c = MetricsCard;\nconst formatBytes = bytes => {\n  if (!bytes && bytes !== 0) return 'N/A';\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\nconst Dashboard = () => {\n  _s();\n  var _metrics$system, _metrics$system2, _metrics$system3, _metrics$cpu, _metrics$system4, _metrics$cpu2, _metrics$cpu2$usage, _metrics$predictions, _metrics$predictions$, _metrics$memory, _metrics$memory$perce, _metrics$memory2, _metrics$gpu, _metrics$gpu2, _metrics$gpu2$usage, _metrics$gpu3, _metrics$memory3, _metrics$memory3$swap, _metrics$gpu4, _metrics$network, _metrics$network2;\n  const [metrics, setMetrics] = useState({\n    cpu: {\n      usage: 0,\n      frequency: 0,\n      cores: 0\n    },\n    memory: {\n      percent: 0,\n      available: 0,\n      total: 0,\n      swap_percent: 0\n    },\n    gpu: {\n      available: false,\n      usage: 0,\n      type: 'N/A'\n    },\n    disk: [],\n    network: {\n      bytes_sent: 0,\n      bytes_recv: 0\n    },\n    system: {\n      os: '',\n      os_version: '',\n      processor: '',\n      boot_time: ''\n    },\n    predictions: {\n      cpu: 0\n    }\n  });\n  const [historicalData, setHistoricalData] = useState([]);\n  useEffect(() => {\n    socket.on(\"update_metrics\", data => {\n      try {\n        const parsedData = JSON.parse(data);\n        setMetrics(prevMetrics => ({\n          ...prevMetrics,\n          ...parsedData\n        }));\n\n        // Update historical data for charts\n        setHistoricalData(prev => {\n          var _parsedData$cpu, _parsedData$memory, _parsedData$gpu, _parsedData$predictio;\n          const newData = [...prev, {\n            time: new Date().toLocaleTimeString(),\n            cpu: ((_parsedData$cpu = parsedData.cpu) === null || _parsedData$cpu === void 0 ? void 0 : _parsedData$cpu.usage) || 0,\n            memory: ((_parsedData$memory = parsedData.memory) === null || _parsedData$memory === void 0 ? void 0 : _parsedData$memory.percent) || 0,\n            gpu: ((_parsedData$gpu = parsedData.gpu) === null || _parsedData$gpu === void 0 ? void 0 : _parsedData$gpu.usage) || 0,\n            predicted_cpu: ((_parsedData$predictio = parsedData.predictions) === null || _parsedData$predictio === void 0 ? void 0 : _parsedData$predictio.cpu) || 0\n          }].slice(-20);\n          return newData;\n        });\n      } catch (error) {\n        console.error(\"Error processing metrics:\", error);\n      }\n    });\n    return () => socket.off(\"update_metrics\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"System Monitoring Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.systemInfo,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"System Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"OS: \", ((_metrics$system = metrics.system) === null || _metrics$system === void 0 ? void 0 : _metrics$system.os) || 'N/A', \" \", ((_metrics$system2 = metrics.system) === null || _metrics$system2 === void 0 ? void 0 : _metrics$system2.os_version) || '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Processor: \", ((_metrics$system3 = metrics.system) === null || _metrics$system3 === void 0 ? void 0 : _metrics$system3.processor) || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Cores: \", ((_metrics$cpu = metrics.cpu) === null || _metrics$cpu === void 0 ? void 0 : _metrics$cpu.cores) || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Boot Time: \", ((_metrics$system4 = metrics.system) === null || _metrics$system4 === void 0 ? void 0 : _metrics$system4.boot_time) || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.metricsGrid,\n      children: [/*#__PURE__*/_jsxDEV(MetricsCard, {\n        title: \"CPU Usage\",\n        value: `${((_metrics$cpu2 = metrics.cpu) === null || _metrics$cpu2 === void 0 ? void 0 : (_metrics$cpu2$usage = _metrics$cpu2.usage) === null || _metrics$cpu2$usage === void 0 ? void 0 : _metrics$cpu2$usage.toFixed(1)) || '0'}%`,\n        subtext: `Prediction: ${((_metrics$predictions = metrics.predictions) === null || _metrics$predictions === void 0 ? void 0 : (_metrics$predictions$ = _metrics$predictions.cpu) === null || _metrics$predictions$ === void 0 ? void 0 : _metrics$predictions$.toFixed(1)) || '0'}%`,\n        color: \"#FFA500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MetricsCard, {\n        title: \"Memory Usage\",\n        value: `${((_metrics$memory = metrics.memory) === null || _metrics$memory === void 0 ? void 0 : (_metrics$memory$perce = _metrics$memory.percent) === null || _metrics$memory$perce === void 0 ? void 0 : _metrics$memory$perce.toFixed(1)) || '0'}%`,\n        subtext: `Available: ${formatBytes((_metrics$memory2 = metrics.memory) === null || _metrics$memory2 === void 0 ? void 0 : _metrics$memory2.available)}`,\n        color: \"#4299E1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MetricsCard, {\n        title: \"GPU Usage\",\n        value: (_metrics$gpu = metrics.gpu) !== null && _metrics$gpu !== void 0 && _metrics$gpu.available ? `${((_metrics$gpu2 = metrics.gpu) === null || _metrics$gpu2 === void 0 ? void 0 : (_metrics$gpu2$usage = _metrics$gpu2.usage) === null || _metrics$gpu2$usage === void 0 ? void 0 : _metrics$gpu2$usage.toFixed(1)) || '0'}%` : 'N/A',\n        subtext: `Type: ${((_metrics$gpu3 = metrics.gpu) === null || _metrics$gpu3 === void 0 ? void 0 : _metrics$gpu3.type) || 'Not detected'}`,\n        color: \"#48BB78\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MetricsCard, {\n        title: \"Swap Usage\",\n        value: `${((_metrics$memory3 = metrics.memory) === null || _metrics$memory3 === void 0 ? void 0 : (_metrics$memory3$swap = _metrics$memory3.swap_percent) === null || _metrics$memory3$swap === void 0 ? void 0 : _metrics$memory3$swap.toFixed(1)) || '0'}%`,\n        color: \"#9F7AEA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chartContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"System Usage Over Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: historicalData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"cpu\",\n            stroke: \"#FFA500\",\n            name: \"CPU Usage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"predicted_cpu\",\n            stroke: \"#FF4500\",\n            strokeDasharray: \"5 5\",\n            name: \"Predicted CPU\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"memory\",\n            stroke: \"#4299E1\",\n            name: \"Memory Usage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), ((_metrics$gpu4 = metrics.gpu) === null || _metrics$gpu4 === void 0 ? void 0 : _metrics$gpu4.available) && /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"gpu\",\n            stroke: \"#48BB78\",\n            name: \"GPU Usage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.diskSection,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Disk Usage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.diskGrid,\n        children: metrics.disk.map((disk, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.diskCard,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: disk.mountpoint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Used: \", formatBytes(disk.used)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Free: \", formatBytes(disk.free)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.progressBar,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: `${disk.percent || 0}%`,\n                backgroundColor: (disk.percent || 0) > 90 ? '#F56565' : '#48BB78'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.networkSection,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Network Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.networkGrid,\n        children: [/*#__PURE__*/_jsxDEV(MetricsCard, {\n          title: \"Data Sent\",\n          value: formatBytes((_metrics$network = metrics.network) === null || _metrics$network === void 0 ? void 0 : _metrics$network.bytes_sent),\n          color: \"#805AD5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricsCard, {\n          title: \"Data Received\",\n          value: formatBytes((_metrics$network2 = metrics.network) === null || _metrics$network2 === void 0 ? void 0 : _metrics$network2.bytes_recv),\n          color: \"#805AD5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"yOOszig1EcAZSvC6KLMFqq97S5Q=\");\n_c2 = Dashboard;\nexport default Dashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"MetricsCard\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","io","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","styles","jsxDEV","_jsxDEV","socket","MetricsCard","title","value","subtext","color","className","card","children","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","fontWeight","_c","formatBytes","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","Dashboard","_s","_metrics$system","_metrics$system2","_metrics$system3","_metrics$cpu","_metrics$system4","_metrics$cpu2","_metrics$cpu2$usage","_metrics$predictions","_metrics$predictions$","_metrics$memory","_metrics$memory$perce","_metrics$memory2","_metrics$gpu","_metrics$gpu2","_metrics$gpu2$usage","_metrics$gpu3","_metrics$memory3","_metrics$memory3$swap","_metrics$gpu4","_metrics$network","_metrics$network2","metrics","setMetrics","cpu","usage","frequency","cores","memory","percent","available","total","swap_percent","gpu","type","disk","network","bytes_sent","bytes_recv","system","os","os_version","processor","boot_time","predictions","historicalData","setHistoricalData","on","data","parsedData","JSON","parse","prevMetrics","prev","_parsedData$cpu","_parsedData$memory","_parsedData$gpu","_parsedData$predictio","newData","time","Date","toLocaleTimeString","predicted_cpu","slice","error","console","off","container","systemInfo","metricsGrid","chartContainer","width","height","strokeDasharray","dataKey","stroke","name","diskSection","diskGrid","map","index","diskCard","mountpoint","used","free","progressBar","backgroundColor","networkSection","networkGrid","_c2","$RefreshReg$"],"sources":["C:/Users/KARTHIKEYA REDDY/Desktop/real/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\r\nimport styles from \"../styles/Dashboard.module.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\");\r\n\r\nconst MetricsCard = ({ title, value, subtext, color = \"white\" }) => (\r\n  <div className={styles.card}>\r\n    <h3>{title}</h3>\r\n    <p style={{ color: color, fontSize: '1.5rem', fontWeight: 'bold' }}>{value}</p>\r\n    {subtext && <p className={styles.subtext}>{subtext}</p>}\r\n  </div>\r\n);\r\n\r\nconst formatBytes = (bytes) => {\r\n  if (!bytes && bytes !== 0) return 'N/A';\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const [metrics, setMetrics] = useState({\r\n    cpu: { usage: 0, frequency: 0, cores: 0 },\r\n    memory: { percent: 0, available: 0, total: 0, swap_percent: 0 },\r\n    gpu: { available: false, usage: 0, type: 'N/A' },\r\n    disk: [],\r\n    network: { bytes_sent: 0, bytes_recv: 0 },\r\n    system: { os: '', os_version: '', processor: '', boot_time: '' },\r\n    predictions: { cpu: 0 }\r\n  });\r\n  \r\n  const [historicalData, setHistoricalData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"update_metrics\", (data) => {\r\n      try {\r\n        const parsedData = JSON.parse(data);\r\n        setMetrics(prevMetrics => ({\r\n          ...prevMetrics,\r\n          ...parsedData\r\n        }));\r\n        \r\n        // Update historical data for charts\r\n        setHistoricalData(prev => {\r\n          const newData = [...prev, {\r\n            time: new Date().toLocaleTimeString(),\r\n            cpu: parsedData.cpu?.usage || 0,\r\n            memory: parsedData.memory?.percent || 0,\r\n            gpu: parsedData.gpu?.usage || 0,\r\n            predicted_cpu: parsedData.predictions?.cpu || 0\r\n          }].slice(-20);\r\n          return newData;\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error processing metrics:\", error);\r\n      }\r\n    });\r\n\r\n    return () => socket.off(\"update_metrics\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h1>System Monitoring Dashboard</h1>\r\n      \r\n      {/* System Information */}\r\n      <div className={styles.systemInfo}>\r\n        <h2>System Information</h2>\r\n        <p>OS: {metrics.system?.os || 'N/A'} {metrics.system?.os_version || ''}</p>\r\n        <p>Processor: {metrics.system?.processor || 'N/A'}</p>\r\n        <p>Cores: {metrics.cpu?.cores || 'N/A'}</p>\r\n        <p>Boot Time: {metrics.system?.boot_time || 'N/A'}</p>\r\n      </div>\r\n\r\n      {/* Main Metrics Grid */}\r\n      <div className={styles.metricsGrid}>\r\n        <MetricsCard \r\n          title=\"CPU Usage\" \r\n          value={`${metrics.cpu?.usage?.toFixed(1) || '0'}%`}\r\n          subtext={`Prediction: ${metrics.predictions?.cpu?.toFixed(1) || '0'}%`}\r\n          color=\"#FFA500\"\r\n        />\r\n        <MetricsCard \r\n          title=\"Memory Usage\" \r\n          value={`${metrics.memory?.percent?.toFixed(1) || '0'}%`}\r\n          subtext={`Available: ${formatBytes(metrics.memory?.available)}`}\r\n          color=\"#4299E1\"\r\n        />\r\n        <MetricsCard \r\n          title=\"GPU Usage\" \r\n          value={metrics.gpu?.available ? `${metrics.gpu?.usage?.toFixed(1) || '0'}%` : 'N/A'}\r\n          subtext={`Type: ${metrics.gpu?.type || 'Not detected'}`}\r\n          color=\"#48BB78\"\r\n        />\r\n        <MetricsCard \r\n          title=\"Swap Usage\" \r\n          value={`${metrics.memory?.swap_percent?.toFixed(1) || '0'}%`}\r\n          color=\"#9F7AEA\"\r\n        />\r\n      </div>\r\n\r\n      {/* CPU Usage Chart */}\r\n      <div className={styles.chartContainer}>\r\n        <h2>System Usage Over Time</h2>\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <LineChart data={historicalData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"time\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"cpu\" stroke=\"#FFA500\" name=\"CPU Usage\" />\r\n            <Line type=\"monotone\" dataKey=\"predicted_cpu\" stroke=\"#FF4500\" strokeDasharray=\"5 5\" name=\"Predicted CPU\" />\r\n            <Line type=\"monotone\" dataKey=\"memory\" stroke=\"#4299E1\" name=\"Memory Usage\" />\r\n            {metrics.gpu?.available && \r\n              <Line type=\"monotone\" dataKey=\"gpu\" stroke=\"#48BB78\" name=\"GPU Usage\" />\r\n            }\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      {/* Disk Usage */}\r\n      <div className={styles.diskSection}>\r\n        <h2>Disk Usage</h2>\r\n        <div className={styles.diskGrid}>\r\n          {metrics.disk.map((disk, index) => (\r\n            <div key={index} className={styles.diskCard}>\r\n              <h3>{disk.mountpoint}</h3>\r\n              <p>Used: {formatBytes(disk.used)}</p>\r\n              <p>Free: {formatBytes(disk.free)}</p>\r\n              <div className={styles.progressBar}>\r\n                <div \r\n                  style={{ \r\n                    width: `${disk.percent || 0}%`,\r\n                    backgroundColor: (disk.percent || 0) > 90 ? '#F56565' : '#48BB78'\r\n                  }} \r\n                />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Network Statistics */}\r\n      <div className={styles.networkSection}>\r\n        <h2>Network Statistics</h2>\r\n        <div className={styles.networkGrid}>\r\n          <MetricsCard \r\n            title=\"Data Sent\" \r\n            value={formatBytes(metrics.network?.bytes_sent)}\r\n            color=\"#805AD5\"\r\n          />\r\n          <MetricsCard \r\n            title=\"Data Received\" \r\n            value={formatBytes(metrics.network?.bytes_recv)}\r\n            color=\"#805AD5\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}